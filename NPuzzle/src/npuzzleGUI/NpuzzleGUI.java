/*
 * NpuzzleGUI.java
 *
 * Created on 20 de agosto de 2010, 10:33 PM
 */

package npuzzleGUI;

/**
 *
 * @author  Administrador
 */

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.CropImageFilter;
import java.awt.image.FilteredImageSource;
import java.awt.Graphics;
import java.util.logging.Level;
import java.util.logging.Logger;


import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

import npuzzle.NPuzzle;
import busqueda.*;
import java.text.DecimalFormat;
import java.util.Iterator;
import java.util.Stack;
import npuzzle.*;


public class NpuzzleGUI extends javax.swing.JFrame {
    private JPanel panel;
    private JLabel label;
    private ImagePanel hole;
    private Image source;
    private Image blank;
    //private Image image;
    private int dimension;
    private boolean leftOut;
    private boolean cuadricula;
    boolean imagenes;
    private boolean resuelto;
    private Solucion solution;
    private BusquedaAnch anch;
    //private JPanel panelCentral;
    int[][] pos;
    int width, height;
    int cuadro;
    /** Creates new form NpuzzleGUI */
    public NpuzzleGUI() { 
        initComponents();        
        //panelCentral.setLayout(new GridLayout(3, 3));
        //panelCentral = new JPanel();
        dimension = getDimension();
        imagenes = false;
        resuelto = false;
        pos = new int[3][3];
        for (int i = 0; i<dimension*dimension; i++){
            pos[i/dimension][i%dimension]=i;
        }

        try {
            ImageIcon sh = new ImageIcon(NpuzzleGUI.class.getResource("Square.jpg"));
            ImageIcon bl = new ImageIcon(NpuzzleGUI.class.getResource("Blank.jpg"));
            blank = bl.getImage();
            source = sh.getImage();
            width = 575;//sid.getIconWidth();
            height = 575;//sid.getIconHeight();
            cuadro = width/dimension;
            leftOut = (width%dimension)>3;
            cuadricula = getCuadricula();
        } catch(Exception e){
            System.out.println(e.getMessage());
        }



        //add(Box.createRigidArea(new Dimension(0, 5)), BorderLayout.NORTH);    
        //(panelCentral, BorderLayout.CENTER);

        for (int i = 0; i<dimension*dimension; i++){
            if (i==(dimension*dimension-1)){
                hole = new ImagePanel(i, dimension, cuadro);
                panelCentral.add(hole);
                this.panelCentral.validate();
            } else {
                panel = new ImagePanel(i, dimension, cuadro);
                panelCentral.add(panel);
            }
        }     
        for (java.awt.Component pan : this.panelCentral.getComponents()) {
            pan.validate();
            pan.repaint();
        }

        new Thread(new Runnable() {
                public void run() {
                    try{
                        Thread.currentThread().sleep(200);
                    } catch(Exception e){
                        System.out.println(e.getMessage());
                    }
                    panelCentral.repaint();
                }
        }).start();
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        groupEstrategia = new javax.swing.ButtonGroup();
        barPestanas = new javax.swing.JTabbedPane();
        tablero = new javax.swing.JPanel();
        panelCentral = new javax.swing.JPanel();
        barBtnes = new javax.swing.JPanel();
        btnVistaPrevia = new javax.swing.JButton();
        btnNuevo = new javax.swing.JButton();
        btnResolver = new javax.swing.JButton();
        btnSgte = new javax.swing.JButton();
        btnArmar = new javax.swing.JButton();
        configuracion = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        radioBtnAnchura = new javax.swing.JRadioButton();
        radioBtnProfundidad = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        labelEstrategia = new javax.swing.JLabel();
        jTextDimension = new javax.swing.JTextField();
        jCheckCuadricula = new javax.swing.JCheckBox();
        jImagenes = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("N-Puzzle");
        setMinimumSize(new java.awt.Dimension(590, 650));
        setResizable(false);

        barPestanas.setMinimumSize(new java.awt.Dimension(580, 44));
        barPestanas.setPreferredSize(new java.awt.Dimension(577, 677));

        tablero.setDoubleBuffered(false);
        tablero.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                tableroComponentShown(evt);
            }
        });

        panelCentral.setMinimumSize(new java.awt.Dimension(560, 100));
        panelCentral.setPreferredSize(new java.awt.Dimension(575, 575));
        panelCentral.setRequestFocusEnabled(false);
        panelCentral.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelCentralMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelCentralLayout = new javax.swing.GroupLayout(panelCentral);
        panelCentral.setLayout(panelCentralLayout);
        panelCentralLayout.setHorizontalGroup(
            panelCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 572, Short.MAX_VALUE)
        );
        panelCentralLayout.setVerticalGroup(
            panelCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 573, Short.MAX_VALUE)
        );

        barBtnes.setPreferredSize(new java.awt.Dimension(575, 26));

        btnVistaPrevia.setFont(new java.awt.Font("Arial", 0, 11));
        btnVistaPrevia.setText("Vista Previa");
        btnVistaPrevia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVistaPreviaActionPerformed(evt);
            }
        });
        barBtnes.add(btnVistaPrevia);

        btnNuevo.setFont(new java.awt.Font("Arial", 0, 11));
        btnNuevo.setActionCommand("jButton1");
        btnNuevo.setLabel("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        barBtnes.add(btnNuevo);

        btnResolver.setFont(new java.awt.Font("Arial", 0, 11));
        btnResolver.setLabel("Resolver");
        btnResolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResolverActionPerformed(evt);
            }
        });
        barBtnes.add(btnResolver);

        btnSgte.setFont(new java.awt.Font("Arial", 0, 11));
        btnSgte.setEnabled(false);
        btnSgte.setLabel("Siguiente");
        barBtnes.add(btnSgte);

        btnArmar.setFont(new java.awt.Font("Arial", 0, 11));
        btnArmar.setText("Armar");
        btnArmar.setEnabled(false);
        btnArmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArmarActionPerformed(evt);
            }
        });
        barBtnes.add(btnArmar);

        javax.swing.GroupLayout tableroLayout = new javax.swing.GroupLayout(tablero);
        tablero.setLayout(tableroLayout);
        tableroLayout.setHorizontalGroup(
            tableroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelCentral, javax.swing.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE)
            .addComponent(barBtnes, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE)
        );
        tableroLayout.setVerticalGroup(
            tableroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tableroLayout.createSequentialGroup()
                .addComponent(panelCentral, javax.swing.GroupLayout.DEFAULT_SIZE, 573, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(barBtnes, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        barPestanas.addTab("Tablero", tablero);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        groupEstrategia.add(radioBtnAnchura);
        radioBtnAnchura.setText("En amplitud");
        radioBtnAnchura.setActionCommand("anchura");

        groupEstrategia.add(radioBtnProfundidad);
        radioBtnProfundidad.setSelected(true);
        radioBtnProfundidad.setText("En profundidad");
        radioBtnProfundidad.setActionCommand("profundidad");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel2.setText("Estrategia");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(radioBtnProfundidad)
                        .addGap(48, 48, 48)
                        .addComponent(radioBtnAnchura))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)))
                .addContainerGap(108, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioBtnProfundidad)
                    .addComponent(radioBtnAnchura))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        labelEstrategia.setText("Dimensión");

        jTextDimension.setText("3");

        jCheckCuadricula.setSelected(true);
        jCheckCuadricula.setText("Cuadrícula");

        jImagenes.setText("Imagen");
        jImagenes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jImagenesActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel1.setText("Tablero");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jImagenes)
                            .addComponent(jCheckCuadricula)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(labelEstrategia)
                                .addGap(6, 6, 6)
                                .addComponent(jTextDimension, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(174, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelEstrategia)
                    .addComponent(jTextDimension, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addComponent(jCheckCuadricula)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jImagenes)
                .addContainerGap())
        );

        javax.swing.GroupLayout configuracionLayout = new javax.swing.GroupLayout(configuracion);
        configuracion.setLayout(configuracionLayout);
        configuracionLayout.setHorizontalGroup(
            configuracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configuracionLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(configuracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(175, Short.MAX_VALUE))
        );
        configuracionLayout.setVerticalGroup(
            configuracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configuracionLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(354, Short.MAX_VALUE))
        );

        barPestanas.addTab("Configuración", configuracion);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(barPestanas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(barPestanas, javax.swing.GroupLayout.PREFERRED_SIZE, 652, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        barPestanas.getAccessibleContext().setAccessibleName("Tablero");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnResolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResolverActionPerformed
        //String seleccion = this.groupEstrategia.getSelection().getActionCommand();
        /*int i, j;

        for( i = 0; i < this.dimension; i++){
            for( j = 0; j < this.dimension; j++){

                System.out.print( "\t" + ( this.pos[i][j]) );
            }
            System.out.println();
        }*/
        
        btnNuevo.setEnabled(false);
        btnVistaPrevia.setEnabled(false);
        btnResolver.setEnabled(false);
        if(isProf()){
            new Thread(new Runnable() {
                    public void run() {
                        try{
                            long inicio, fin;
                            inicio=System.currentTimeMillis();
                            setSolution( resolverProf() );
                            btnNuevo.setEnabled(true);
                            btnVistaPrevia.setEnabled(true);
                            //btnResolver.setEnabled(true);
                            //btnAnterior.setEnabled(true);
                            btnArmar.setEnabled(true);
                            //btnSgte.setEnabled(true);
                            resuelto = true;
                            /*fin=System.currentTimeMillis();
                            if(fin-inicio<60000){
                                JOptionPane.showMessageDialog(tablero, "Tardo: " + (fin-inicio) + "ms");
                            } else{
                                JOptionPane.showMessageDialog(tablero, "Tardo: " + (fin-inicio)/60000 + "min " + ((fin-inicio)%60000)/1000+"seg");
                            }*/
                        } catch(Exception e){
                            System.out.println(e.getMessage());
                        }
                        panelCentral.repaint();
                    }
            }).start();
        } else{
            new Thread(new Runnable() {
                    public void run() {
                        try{
                            //long inicio, fin;
                            //inicio=System.currentTimeMillis();
                            resolverAnch();
                            //setSolution( resolverProf() );
                            btnNuevo.setEnabled(true);
                            btnVistaPrevia.setEnabled(true);
                            //btnResolver.setEnabled(true);
                            //btnAnterior.setEnabled(true);
                            btnArmar.setEnabled(true);
                            //btnSgte.setEnabled(true);
                            resuelto = true;
                            /*fin=System.currentTimeMillis();
                            if(fin-inicio<60000){
                                JOptionPane.showMessageDialog(tablero, "Tardo: " + (fin-inicio) + "ms");
                            } else{
                                JOptionPane.showMessageDialog(tablero, "Tardo: " + (fin-inicio)/60000 + "min " + ((fin-inicio)%60000)/1000+"seg");
                            }*/
                        } catch(Exception e){
                            System.out.println(e.getMessage());
                        }
                        panelCentral.repaint();
                    }
            }).start();
        }
        
        
        //System.out.println(seleccion);
    }//GEN-LAST:event_btnResolverActionPerformed

    private void btnVistaPreviaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVistaPreviaActionPerformed
        this.nuevaVista();
        for (java.awt.Component pan : this.panelCentral.getComponents()) {
            pan.validate();
            pan.repaint();
        }

        new Thread(new Runnable() {
                public void run() {
                    try{
                        Thread.currentThread().sleep(dimension*10+200);
                    } catch(Exception e){
                        System.out.println(e.getMessage());
                    }
                    panelCentral.repaint();
                }
        }).start();
    }//GEN-LAST:event_btnVistaPreviaActionPerformed

    private void panelCentralMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelCentralMouseClicked
        //System.out.println("hasta aqui");
        
        if(!resuelto){
            ImagePanel button = (ImagePanel) panelCentral.getComponentAt(evt.getPoint());
            Dimension size = button.getSize();

            int labelX = hole.getX()/size.width;
            int labelY = hole.getY()/size.width;
            int buttonX = button.getX()/size.width;
            int buttonY = button.getY()/size.width;
            //int buttonPosX = buttonX / size.width;
            //int buttonPosY = buttonY / size.height;
            //int buttonIndex = pos[buttonPosY][buttonPosX];
            //System.out.println("posY"+buttonY+" posX"+buttonX);
            //System.out.println("2posY"+labelY+" 2posX"+labelX);
            if(buttonX==labelX+1&&buttonY==labelY){
                //btnAnterior.setEnabled(false);
                btnSgte.setEnabled(false);
                btnArmar.setEnabled(false);
                btnResolver.setEnabled(true);
                this.moveBlank(3);//derecha
            } else if(buttonX==labelX-1 && buttonY==labelY){
                //btnAnterior.setEnabled(false);
                btnSgte.setEnabled(false);
                btnArmar.setEnabled(false);
                btnResolver.setEnabled(true);
                this.moveBlank(1);//izquierda
               //System.out.println("jaja");
            } else if(buttonX==labelX&&buttonY==labelY+1){
                //btnAnterior.setEnabled(false);
                btnSgte.setEnabled(false);
                btnArmar.setEnabled(false);
                btnResolver.setEnabled(true);
                this.moveBlank(2);//abajo
                //System.out.println("posY"+buttonPosY+" posX"+buttonPosX);
            } else if(buttonX==labelX&&buttonY==labelY-1){
                //btnAnterior.setEnabled(false);
                btnSgte.setEnabled(false);
                btnArmar.setEnabled(false);
                btnResolver.setEnabled(true);
                this.moveBlank(4);//arriba
                //System.out.println("posY"+buttonPosY+" posX"+buttonPosX);
            }

            new Thread(new Runnable() {
                    public void run() {
                        try{
                            Thread.currentThread().sleep(dimension*10+300);
                        } catch(Exception e){
                            System.out.println(e.getMessage());
                        }
                        panelCentral.repaint();
                    }
            }).start();
        }
        if(isResuelto()){
            btnResolver.setEnabled(false);
        }
    }//GEN-LAST:event_panelCentralMouseClicked

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        this.nuevaVista();
        panelCentral.repaint();
        NPuzzle puzzle = new NPuzzle( this.dimension );
        puzzle.generarTablero();
        puzzle.desordenarTablero(this);
        new Thread(new Runnable() {
                public void run() {
                    try{
                        Thread.currentThread().sleep(dimension*10+300);
                    } catch(Exception e){
                        System.out.println(e.getMessage());
                    }
                    //panelCentral.revalidate();
                    panelCentral.repaint();
                }
        }).start();
        /*String[][] tbl = crearTableroAnch(pos);
        for(int i=0;i<dimension;i++){
            for(int j=0;j<dimension;j++){
                System.out.print(" "+tbl[i][j]);
            }
            System.out.println();
        }*/

    }//GEN-LAST:event_btnNuevoActionPerformed

    private void jImagenesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jImagenesActionPerformed
        imagenes = jImagenes.isSelected();
}//GEN-LAST:event_jImagenesActionPerformed

    private void tableroComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_tableroComponentShown
        if(isResuelto()){
            btnResolver.setEnabled(false);
        }
        new Thread(new Runnable() {
                public void run() {
                    try{
                        Thread.currentThread().sleep(dimension*10+200);
                    } catch(Exception e){
                        System.out.println(e.getMessage());
                    }
                    panelCentral.repaint();
                }
        }).start();
    }//GEN-LAST:event_tableroComponentShown

    private void btnArmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArmarActionPerformed
        btnNuevo.setEnabled(false);
        btnVistaPrevia.setEnabled(false);
        btnResolver.setEnabled(false);
        btnSgte.setEnabled(false);
        //btnAnterior.setEnabled(false);
        btnArmar.setEnabled(false);
        if(isProf()){
            new Thread(new Runnable() {
                    public void run() {
                        try{
                            armarPuzzleProf(solution);
                            btnNuevo.setEnabled(true);
                            btnVistaPrevia.setEnabled(true);
                            //btnAnterior.setEnabled(true);
                            Thread.currentThread().sleep(dimension*10+200);
                        } catch(Exception e){
                            System.out.println(e.getMessage());
                        }
                        panelCentral.repaint();
                    }
            }).start();
        } else{
            new Thread(new Runnable() {
                    public void run() {
                        try{
                            armarPuzzleAnch();
                            btnNuevo.setEnabled(true);
                            btnVistaPrevia.setEnabled(true);
                            //btnAnterior.setEnabled(true);
                            Thread.currentThread().sleep(dimension*10+200);
                        } catch(Exception e){
                            System.out.println(e.getMessage());
                        }
                        panelCentral.repaint();
                    }
            }).start();

        }
    }//GEN-LAST:event_btnArmarActionPerformed


    public void setSolution(Solucion pSolucion){
        solution = pSolucion;
    }

    public void resolverAnch(){
        anch=null;
        DecimalFormat valor = new DecimalFormat("0.00000");
		
        BusquedaAnch puzzle = new BusquedaAnch(crearMetaAnch(),crearTableroAnch(pos));
	puzzle.busquedaAmplitud();
        //if(puzzle.pilaSol.isEmpty()) System.out.printf("\n vacio");
        anch = puzzle;
        String best;
        String all;
        String cantSol;
        String estRec;
        String cantNiv;
        String longCam;
        String metodo = "Búsqueda en Amplitud";
        if(puzzle.tSolucionOpt<60000){
            best = "\nLa mejor solución tardó: " + puzzle.tSolucionOpt+"ms";
        }else {
            best = "\nLa mejor solución tardó: " + puzzle.tSolucionOpt/60000 + "min " + (puzzle.tRecorrerTotalNodos%60000)/1000+"seg";
        }
        longCam = "\nLongitud del camino: " + (anch.pilaSol.size()-1);
        if(puzzle.tRecorrerTotalNodos<60000){
            all = "\nTodas las soluciones tardó: " + puzzle.tRecorrerTotalNodos+"ms";
        }else {
            all = "\nTodas las soluciones tardó: " + puzzle.tRecorrerTotalNodos/60000 + "min " + (puzzle.tRecorrerTotalNodos%60000)/1000+"seg";
        }
        /*if(fin-inicio<60000){
            JOptionPane.showMessageDialog(tablero, "Tardo: " + (fin-inicio) + "ms");
        } else{
            JOptionPane.showMessageDialog(tablero, "Tardo: " + (fin-inicio)/60000 + "min " + ((fin-inicio)%60000)/1000+"seg");
        }*/
        //cantSol = "\nCantidad de soluciones: " + puzzle.contSoluciones;
        estRec = "\nEstados recorridos: " + puzzle.nEstadosRecorridos;
        cantNiv = "\nCantidad de niveles: " + puzzle.longitudLevels;
        JOptionPane.showMessageDialog(tablero, best+longCam+all+estRec+cantNiv, metodo,JOptionPane.INFORMATION_MESSAGE);
	//System.out.printf("\nCantidad de soluciones: %d",puzzle.contSoluciones);
	//System.out.printf("\nTotal de estados recorridos: %d",puzzle.nEstadosRecorridos);
	//System.out.print("\nCantidad de niveles: " + puzzle.longitudLevels + "\n ");
   	//System.out.printf("\nTiempo de recorrer todos los nodos : " + (puzzle.tRecorrerTotalNodos) );
   	//System.out.print("\nTiempo de encontrar la solucion optima : " + puzzle.tSolucionOpt);
        //System.out.print("\nLongitud del camino : " + (anch.pilaSol.size()-1));
    }
    //
    public Solucion resolverProf(){
       
        BusquedaSinInformacion busquedaSinInformacion;
        EstrategiaEnProfundidad estrategia;
        NPuzzle rompecabezas;
        CasillaPuzzle 
                    casillaPuzzle   ,
                    tablero[][];

        Solucion unaSolucion;
        long inicio, fin;
        long mejor = 0;

    // -----------------------------------------------------------------------
        inicio=System.currentTimeMillis();
        rompecabezas    = new NPuzzle( dimension );
       
        rompecabezas.generarTablero(pos);
        //System.out.println("tablero:");
                
        //rompecabezas.imprimirTablero();
        tablero = rompecabezas.getTablero();

        rompecabezas.setTablero( tablero );
       
        estrategia      = new EstrategiaEnProfundidad();

        Solucion mejorSolucion= null;

        rompecabezas.setUnaEstrategia( estrategia );
        
        busquedaSinInformacion  = new BusquedaSinInformacion();
        //unaSolucion     = busquedaSinInformacion.buscarSolucion( rompecabezas, estrategia );

        //System.out.println( "Iniciando ..." );
        int menor = 50000;
        do{
            unaSolucion     = busquedaSinInformacion.buscarSolucion( rompecabezas, estrategia );

            if( unaSolucion.obtenerLongitudDelCamino()>=0&&unaSolucion.obtenerLongitudDelCamino() < menor ){
                menor   = unaSolucion.obtenerLongitudDelCamino();
                mejorSolucion = unaSolucion;
                mejor=System.currentTimeMillis();
                //System.out.println( "NUEVO_MENOR: " + menor );
            }
        }while( unaSolucion.obtenerLongitudDelCamino() > 0 );

        fin=System.currentTimeMillis();
        String best, end;
        String metodo = "Búsqueda en profundidad";
        if(mejor-inicio<60000){
            //JOptionPane.showMessageDialog(this.tablero, "Tardo: " + (fin-inicio) + "ms");
            best = "\nLa mejor solucion tardo: "+(mejor-inicio)+"ms";
        } else{
            best = "\nLa mejor solucion tardo: "+(mejor-inicio)/60000 + "min " + ((mejor-inicio)%60000)/1000+"seg";
            //JOptionPane.showMessageDialog(this.tablero, "Tardo: " + (fin-inicio)/60000 + "min " + ((fin-inicio)%60000)/1000+"seg");
        }
        if(fin-inicio<60000){
            //JOptionPane.showMessageDialog(this.tablero, "Tardo: " + (fin-inicio) + "ms");
            end = "Todas las soluciones tardo: "+(fin-inicio)+"ms";
        } else{
            end = "Todas las soluciones tardo: "+(fin-inicio)/60000 + "min " + ((fin-inicio)%60000)/1000+"seg";
            //JOptionPane.showMessageDialog(this.tablero, "Tardo: " + (fin-inicio)/60000 + "min " + ((fin-inicio)%60000)/1000+"seg");
        }
        String nVis = "\nNodos visitados: "+mejorSolucion.getCantidadNodosVisitados();
        String nExp = "\nNodos expandidos: "+mejorSolucion.getCantidadNodosExpandidos();
        String lCam = "\nLongitud del camino: "+((SolucionEnProfundidad)mejorSolucion).obtenerLongitudDelCamino();
        JOptionPane.showMessageDialog(this.tablero, best+"\n"+end+lCam+nVis+nExp, metodo, JOptionPane.INFORMATION_MESSAGE);
        return mejorSolucion;
     
    }


    public void armarPuzzleAnch(){
        Stack pila = anch.pilaSol;
        try {
            //System.out.println("pso "+pSolucion);
            int[] casilla;

            //System.out.println("sol:"+casilla);
            Thread.currentThread().sleep(400);
            while(!pila.isEmpty()){
                 casilla = (int[])pila.pop();
                //System.out.println("val "+casilla.obtenerValor()+" "+casilla.getCoordenadaX()+" "+casilla.getCoordenadaY());
                /*System.out.println("hasta aqui");
                System.out.println("coordXcas"+casilla.getCoordenadaX());
                System.out.println("coordYcas"+casilla.getCoordenadaY());
                System.out.println("coordX"+hole.getPosicionX());
                System.out.println("coordY"+hole.getPosicionY());*/
                //System.out.println(casilla.yaFueVisitado());

                
                /*if(casillaSgte==null){
                    sgtePosible=true;
                } else{
                    sgtePosible =false;
                }*/
                if(true){
                    //Thread.currentThread().sleep(400);
                    if(casilla[0]==hole.getPosicionX()+1&&hole.getPosicionY()==casilla[1]){
                        //if(casilla.yaFueVisitado())
                        //movimiento=2;
                        moveBlank(2);//abajo
                    } else if(casilla[0]==hole.getPosicionX()-1&&hole.getPosicionY()==casilla[1]){
                        //System.out.println("adjflkadffflkajdlfj");
                        //movimiento=4;
                        moveBlank(4);//arriba
                    } else if(casilla[0]==hole.getPosicionX()&&hole.getPosicionY()==casilla[1]+1){
                        //movimiento=1;
                        moveBlank(1);//derecha
                    } else if(casilla[0]==hole.getPosicionX()&&hole.getPosicionY()==casilla[1]-1){
                        //System.out.println("entro");
                        //movimiento=3;
                        moveBlank(3);//izquierda
                    }
                    
                    
                    new Thread(new Runnable() {
                            public void run() {
                                try{
                                    Thread.currentThread().sleep(200);
                                } catch(Exception e){
                                    System.out.println(e.getMessage());
                                }
                                panelCentral.repaint();
                            }
                    }).start();
                    Thread.currentThread().sleep(900);
                }

                
                //System.out.println("casSgte");
            }

        } catch (Exception ex) {
            Logger.getLogger(NpuzzleGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        resuelto=false;
    }

    public void armarPuzzleProf(Solucion pSolucion){
        try {
            //System.out.println("pso "+pSolucion);
            CasillaPuzzle casilla = (CasillaPuzzle)pSolucion.obtenerSiguienteNodo();
            CasillaPuzzle casillaSgte;
            boolean sgtePosible;
            int movimiento = 0;
            
            //System.out.println("sol:"+casilla);
            Thread.currentThread().sleep(400);
            while(casilla!=null){
                //System.out.println("val "+casilla.obtenerValor()+" "+casilla.getCoordenadaX()+" "+casilla.getCoordenadaY());
                /*System.out.println("hasta aqui");
                System.out.println("coordXcas"+casilla.getCoordenadaX());
                System.out.println("coordYcas"+casilla.getCoordenadaY());
                System.out.println("coordX"+hole.getPosicionX());
                System.out.println("coordY"+hole.getPosicionY());*/
                //System.out.println(casilla.yaFueVisitado());
                casillaSgte = (CasillaPuzzle)pSolucion.obtenerSiguienteNodo();
                if(casillaSgte==null){
                    sgtePosible=true;
                } else{
                    sgtePosible =false;
                }
                if(true){
                    //Thread.currentThread().sleep(400);
                    if(casilla.getCoordenadaX()==hole.getPosicionX()+1&&hole.getPosicionY()==casilla.getCoordenadaY()){
                        //if(casilla.yaFueVisitado())
                        movimiento=2;
                        moveBlank(2);//abajo
                    } else if(casilla.getCoordenadaX()==hole.getPosicionX()-1&&hole.getPosicionY()==casilla.getCoordenadaY()){
                        //System.out.println("adjflkadffflkajdlfj");
                        movimiento=4;
                        moveBlank(4);//arriba
                    } else if(casilla.getCoordenadaX()==hole.getPosicionX()&&hole.getPosicionY()==casilla.getCoordenadaY()+1){
                        movimiento=1;
                        moveBlank(1);//derecha
                    } else if(casilla.getCoordenadaX()==hole.getPosicionX()&&hole.getPosicionY()==casilla.getCoordenadaY()-1){
                        //System.out.println("entro");
                        movimiento=3;
                        moveBlank(3);//izquierda
                    }
                    if(!sgtePosible){
                        if(casillaSgte.getCoordenadaX()==hole.getPosicionX()+1&&hole.getPosicionY()==casillaSgte.getCoordenadaY()){
                            //if(casilla.yaFueVisitado())
                            sgtePosible=true;
                        } else if(casillaSgte.getCoordenadaX()==hole.getPosicionX()-1&&hole.getPosicionY()==casillaSgte.getCoordenadaY()){
                            //System.out.println("adjflkadffflkajdlfj");
                            sgtePosible=true;
                        } else if(casillaSgte.getCoordenadaX()==hole.getPosicionX()&&hole.getPosicionY()==casillaSgte.getCoordenadaY()+1){
                            sgtePosible=true;//derecha
                        } else if(casillaSgte.getCoordenadaX()==hole.getPosicionX()&&hole.getPosicionY()==casillaSgte.getCoordenadaY()-1){
                            //System.out.println("entro");
                            sgtePosible=true;//izquierda
                        }
                    }
                    if(!sgtePosible){
                        if(movimiento==1){
                            moveBlank(3);
                        } else if(movimiento==2){
                            moveBlank(4);
                        } else if(movimiento==3){
                            moveBlank(1);
                        } else if(movimiento==4){
                            moveBlank(2);
                        }
                    } else {
                        
                        new Thread(new Runnable() {
                                public void run() {
                                    try{
                                        Thread.currentThread().sleep(200);
                                    } catch(Exception e){
                                        System.out.println(e.getMessage());
                                    }
                                    panelCentral.repaint();
                                }
                        }).start();
                        Thread.currentThread().sleep(900);
                    }
                }

                casilla = casillaSgte;
                //System.out.println("casSgte");
            }

        } catch (Exception ex) {
            Logger.getLogger(NpuzzleGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        resuelto=false;
    }
    public void nuevaVista(){
        //System.out.println(getDimension());
        resuelto = false;
        //btnAnterior.setEnabled(false);
        btnSgte.setEnabled(false);
        btnArmar.setEnabled(false);
        btnResolver.setEnabled(true);
        dimension = getDimension();
        if (dimension == 0){
            return;
        }
        pos = new int[dimension][dimension];
        for (int i = 0; i<dimension*dimension; i++){
            pos[i/dimension][i%dimension]=i;
        }
        cuadro = width/dimension;
        leftOut = (width%dimension)>3;
        cuadricula = getCuadricula();
        panelCentral.removeAll();
        
        for (int i = 0; i<dimension*dimension; i++){
            if (i==(dimension*dimension-1)){
                hole = new ImagePanel(i, dimension, cuadro);
                panelCentral.add(hole);
                this.panelCentral.validate();
            } else {
                panel = new ImagePanel(i, dimension, cuadro);
                panelCentral.add(panel);
            }
        }     
    }
    public class ImagePanel extends JPanel{
        private Image image;
        private int dim;
        private Integer valor;
        private int celda;

        public ImagePanel(int nro, int n, int pCuadro) {
            int x;
            int y;
            dim = n;
            valor = nro;
            celda = pCuadro;
            x = nro%dim;
            y = nro/dim;
            try {
                if(x==dim-1&&y==dim-1){
                    if (cuadricula){
                        image = createImage(new FilteredImageSource(blank.getSource(),
                            new CropImageFilter(x*celda, y*celda, celda-1, celda-1)));
                    } else{
                        image = createImage(new FilteredImageSource(blank.getSource(),
                            new CropImageFilter(x*celda, y*celda, celda, celda)));
                    }
                    //System.out.println("hasta");
                } else if(cuadricula){
                    image = createImage(new FilteredImageSource(source.getSource(),
                            new CropImageFilter(x*celda, y*celda, celda-1, celda-1)));
                } else{
                    image = createImage(new FilteredImageSource(source.getSource(),
                            new CropImageFilter(x*celda, y*celda, celda, celda)));
                }

                this.setSize(new Dimension(celda, celda));
                this.setMinimumSize(new Dimension(celda, celda));
                this.setPreferredSize(new Dimension(celda, celda));
                if(leftOut){
                    int correc;
                    correc = (width%dim)/2;
                    this.setLocation((x*celda)+correc, (y*celda));
                } else{
                    this.setLocation((x*(celda)), (y*(celda)));
                }
                
            } catch (Exception ex) {
                ex.getMessage();
            }    
        }
        
        public int getPosicionY(){
            return this.getX()/hole.getSize().width;
        }
        
        public int getPosicionX(){
            return this.getY()/hole.getSize().width;
        }
        //hata aora no encontre donde usar esto, seguro le quito
        public void changeImage(int x, int y){
            try{
                image = createImage(new FilteredImageSource(source.getSource(),
                            new CropImageFilter(x*(width/dim), y*(height/dim), (width/dim), (height/dim))));
            } catch(Exception e){
                System.out.println(e.getMessage());
            }
        }
        public Image getImage(){
            return this.image;
        }
        public void setImage(Image pImage){
            this.image = pImage;
        }
        public int getValor(){
            return this.valor;
        }
        public void setValor(int val){
            this.valor = val;
        }
        

        @Override
        public void paintComponent(Graphics g) {
            if(dim>20&&!jImagenes.isSelected()){
                jImagenes.doClick();
            }

            if (imagenes){
                g.drawImage(image, 0, 0, null); // see javadoc for more info on the parameters
                return;
            }
            super.paintComponent(g);
            for (int r=0; r<dim; r++) {
                for (int c=0; c<dim; c++) {
                    int x = c * celda;
                    int y = r * celda;
                    Integer j = (valor+1);
                    String text = j.toString();
                    if (valor != (dim*dim)-1 ) {
                        g.setColor(Color.gray);
                        g.fillRect(x+2, y+2, celda-4, celda-4);
                        g.setColor(Color.black);
                        g.setFont(new Font("SansSerif", Font.BOLD, celda/2));
                        if(dim<50){
                            if (text.length()<3){
                                g.drawString(text, x+(celda/4), y+(3*celda)/4);
                            } else {
                                g.setFont(new Font("SansSerif", Font.BOLD, celda/3));
                                g.drawString(text, x+(celda/6), y+(3*celda)/4);
                            }
                        }
                    }
                }
            }
        //end paintComponent
        }

    }
    
    public boolean isProf(){
        return radioBtnProfundidad.isSelected();
    }
    public boolean isAnch(){
        return radioBtnAnchura.isSelected();
    }
    public boolean isResuelto(){
        boolean res=true;
        int nro = 0;
        for(int i=0;i<dimension;i++){
            for(int j=0;j<dimension;j++){
                res=res&&(pos[i][j]==nro);
                nro++;
            }
        }
        return res;
    }
    public void moveBlank(int direccion){
        ImagePanel aux1;
        ImagePanel aux2;
        Image imgAux1;
        Image imgAux2;
        //int posAux1;
        //int posAux2;
        if(direccion==1){//izquierda
            //System.out.println(hole.getX());
            if((hole.getX()/hole.getSize().width)!=0){
                aux1 = (ImagePanel) panelCentral.getComponentAt(hole.getX()-hole.getSize().width, hole.getY());
                aux2 = hole;
                hole = aux1;
                imgAux1 = aux1.getImage();
                imgAux2 = aux2.getImage();
                aux2.setImage(imgAux1);
                aux1.setImage(imgAux2);
                aux2.setValor(aux1.getValor());
                aux1.setValor(dimension*dimension-1);
                pos[aux1.getPosicionX()][aux1.getPosicionY()]=aux1.getValor();
                pos[aux2.getPosicionX()][aux2.getPosicionY()]=aux2.getValor();
            }
        } else if(direccion==2){//abajo
            if((hole.getY()/hole.getSize().width)!=dimension-1){
                aux1 = (ImagePanel) panelCentral.getComponentAt(hole.getX(), hole.getY()+hole.getSize().width);
                aux2 = hole;
                hole = aux1;
                imgAux1 = aux1.getImage();
                imgAux2 = aux2.getImage();
                aux2.setImage(imgAux1);
                aux1.setImage(imgAux2);
                aux2.setValor(aux1.getValor());
                aux1.setValor(dimension*dimension-1);
                pos[aux1.getPosicionX()][aux1.getPosicionY()]=aux1.getValor();
                pos[aux2.getPosicionX()][aux2.getPosicionY()]=aux2.getValor();
            }
        } else if(direccion==3){//derecha;
            if((hole.getX()/hole.getSize().width)!=dimension-1){
                aux1 = (ImagePanel) panelCentral.getComponentAt(hole.getX()+hole.getSize().width, hole.getY());
                aux2 = hole;
                //System.out.println("jeje");
                hole = aux1;
                imgAux1 = aux1.getImage();
                imgAux2 = aux2.getImage();
                aux2.setImage(imgAux1);
                aux1.setImage(imgAux2);
                aux2.setValor(aux1.getValor());
                aux1.setValor(dimension*dimension-1);
                pos[aux1.getPosicionX()][aux1.getPosicionY()]=aux1.getValor();
                pos[aux2.getPosicionX()][aux2.getPosicionY()]=aux2.getValor();
            }
        } else if(direccion==4){//arriba
            if((hole.getY()/hole.getSize().width)!=0){
                aux1 = (ImagePanel) panelCentral.getComponentAt(hole.getX(), hole.getY()-hole.getSize().width);
                aux2 = hole;
                hole = aux1;
                //posAux1 = pos[aux1.getPosicionX()][aux1.getPosicionY()];
                imgAux1 = aux1.getImage();
                imgAux2 = aux2.getImage();
                aux2.setImage(imgAux1);
                aux1.setImage(imgAux2);
                aux2.setValor(aux1.getValor());
                aux1.setValor(dimension*dimension-1);
                pos[aux1.getPosicionX()][aux1.getPosicionY()]=aux1.getValor();
                pos[aux2.getPosicionX()][aux2.getPosicionY()]=aux2.getValor();
            }
        }
    }

    //se debe controlar que sea un entero
    //hace falta algún tipo de manejo de excepciones
    public int getDimension(){
        int dim = 0;
        try{
            dim = Integer.parseInt(jTextDimension.getText());
            if(dim<2||dim>287){
                throw new Exception("Mala dimension");
            }
            
        } catch(Exception ex){
            JOptionPane.showMessageDialog(this, "La dimensión debe ser un número entero del 2 al 287");
            try{
                this.barPestanas.setSelectedComponent(configuracion);
            } catch(Exception e){
                System.out.println(e.getMessage());
            }
        }
        return dim;
    }
    public boolean getCuadricula(){
        return this.jCheckCuadricula.isSelected();
    }
    
    public String[][] crearTableroAnch(int[][] board){
        String[][] tabla = new String[board.length][board.length];
        for(int i=0;i<board.length; i++){
            for(int j=0; j<board.length; j++){
                if(board[i][j]==board.length*board.length-1){
                    tabla[i][j]= "0";
                } else{
                    tabla[i][j]=(new Integer(board[i][j]+1)).toString();
                }
            }
        }
        return tabla;
    }
    public String[][] crearMetaAnch(){
        String[][] tabla = new String[dimension][dimension];
        Integer nro = new Integer(1);
        for(int i=0;i<dimension; i++){
            for(int j=0; j<dimension; j++){
                if(i==dimension-1&&j==dimension-1){
                    tabla[i][j]="0";
                } else{
                    tabla[i][j]=nro.toString();
                }
                nro++;
            }
        }
        return tabla;
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               NpuzzleGUI juego = new NpuzzleGUI();
               juego.setVisible(true); 
               juego.panelCentral.repaint();
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel barBtnes;
    private javax.swing.JTabbedPane barPestanas;
    private javax.swing.JButton btnArmar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnResolver;
    private javax.swing.JButton btnSgte;
    private javax.swing.JButton btnVistaPrevia;
    private javax.swing.JPanel configuracion;
    private javax.swing.ButtonGroup groupEstrategia;
    private javax.swing.JCheckBox jCheckCuadricula;
    private javax.swing.JToggleButton jImagenes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextDimension;
    private javax.swing.JLabel labelEstrategia;
    public javax.swing.JPanel panelCentral;
    private javax.swing.JRadioButton radioBtnAnchura;
    private javax.swing.JRadioButton radioBtnProfundidad;
    private javax.swing.JPanel tablero;
    // End of variables declaration//GEN-END:variables
    
}
